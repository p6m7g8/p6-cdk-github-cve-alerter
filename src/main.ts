import { App, Stack, StackProps } from 'aws-cdk-lib';
import * as cdk from 'aws-cdk-lib';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as kms from 'aws-cdk-lib/aws-kms';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as lambdajs from 'aws-cdk-lib/aws-lambda-nodejs';
import { Construct } from 'constructs';
// import { AwsSolutionsChecks, HIPAASecurityChecks, NIST80053R4Checks, NIST80053R5Checks, PCIDSS321Checks } from 'cdk-nag';

export interface IP6CDKAlerterProps {
}

export class P6CDKAlerter extends cdk.Resource {
  constructor(scope: Construct, id: string, _props?: IP6CDKAlerterProps) {
    super(scope, id);

    const dynamodb_key = new kms.Key(this, 'github-cve-alerter', {
      enableKeyRotation: true,
    });
    dynamodb_key.addAlias('alias/github-cve-alerter');

    const table = new dynamodb.Table(this, 'table', {
      partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },
      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
      tableClass: dynamodb.TableClass.STANDARD_INFREQUENT_ACCESS,
      contributorInsightsEnabled: true,
      encryptionKey: dynamodb_key,
    });

    const publisher = new lambdajs.NodejsFunction(this, 'publisher', {
      runtime: lambda.Runtime.NODEJS_14_X,
      timeout: cdk.Duration.seconds(10),
      tracing: lambda.Tracing.ACTIVE,
      bundling: {
        minify: true,
        externalModules: ['aws-sdk'],
      },
    });

    table.grantReadWriteData(publisher);

    const eventRule = new events.Rule(this, 'scheduleRule', {
      schedule: events.Schedule.cron({
        minute: '*/1',
      }),
    });
    eventRule.addTarget(new targets.LambdaFunction(publisher));
  }
}

export class MyStack extends Stack {
  constructor(scope: Construct, id: string, props: StackProps = {}) {
    super(scope, id, props);

    // define resources here...
    new P6CDKAlerter(this, 'p6-cdk-github-cve-alerter');
  }
}

// for development, use account/region from cdk cli
const devEnv = {
  account: process.env.CDK_DEFAULT_ACCOUNT,
  region: process.env.CDK_DEFAULT_REGION,
};

const app = new App();

new MyStack(app, 'my-stack-dev', { env: devEnv });
// Aspects.of(app).add(new AwsSolutionsChecks({ verbose: true }));
// Aspects.of(app).add(new HIPAASecurityChecks({ verbose: true }));
// Aspects.of(app).add(new NIST80053R4Checks({ verbose: true }));
// Aspects.of(app).add(new NIST80053R5Checks({ verbose: true }));
// Aspects.of(app).add(new PCIDSS321Checks({ verbose: true }));
app.synth();