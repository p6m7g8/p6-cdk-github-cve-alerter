import { Handler, Context, Callback } from 'aws-lambda';
import { githubClient } from './client';
import { VulnerabilityAlerts, VulnerabilityAlertsQuery } from './generated/graphql';

async function query() {
  const result = await githubClient().query<VulnerabilityAlertsQuery>({
    query: VulnerabilityAlerts,
    variables: {
      owner: 'CareRevolutions',
    },
  });

  return result.data;
}

const handler: Handler = async (event: any, _context: Context, _callback: Callback) => {
  console.log({ event });

  const data = await query();
  console.log(data);

  const repositories = data.organization?.repositories.nodes;

  if (repositories) {
    for (const repository of repositories) {
      const vulnerabilityAlerts = repository?.vulnerabilityAlerts?.nodes;

      if (vulnerabilityAlerts) {
        for (const alert of vulnerabilityAlerts) {
          const securityAdvisory = alert?.securityAdvisory;
          console.log(securityAdvisory?.permalink);
        }
      }
    }
  }
};

export { handler };